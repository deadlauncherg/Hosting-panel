<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Servers - <%= typeof settings !== 'undefined' && settings.name ? settings.name : 'Dashboard' %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Your existing CSS styles */
        :root {
            --primary: #7289da;
            --primary-dark: #5b6eae;
            --secondary: #1e1e2e;
            --secondary-light: #2a2a3e;
            --accent: #43b581;
            --danger: #ed4245;
            --warning: #faa81a;
            --text: #ffffff;
            --text-muted: #a0a0c0;
            --border: rgba(255, 255, 255, 0.1);
            --card-bg: rgba(30, 30, 46, 0.8);
            --sidebar-width: 260px;
            --header-height: 70px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: var(--text);
            min-height: 100vh;
            display: flex;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--secondary);
            height: 100vh;
            position: fixed;
            overflow-y: auto;
            padding: 20px 0;
        }

        .sidebar-header {
            padding: 0 20px 20px;
            border-bottom: 1px solid var(--border);
            margin-bottom: 15px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: var(--text-muted);
            text-decoration: none;
            transition: all 0.3s;
        }

        .nav-item:hover {
            background: var(--secondary-light);
            color: var(--text);
        }

        .nav-item.active {
            background: var(--primary);
            color: white;
        }

        .nav-item i {
            width: 24px;
            margin-right: 12px;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: var(--secondary-light);
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            border: 2px solid var(--primary);
        }

        .user-details h3 {
            font-size: 1rem;
        }

        .user-details p {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .logout-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s ease;
            display: flex;
            align-items: center;
        }

        .logout-btn:hover {
            background: #c03537;
        }

        .logout-btn i {
            margin-right: 6px;
        }

        /* Dashboard Grid */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .card-title {
            font-size: 1.2rem;
        }

        .card-icon {
            color: var(--primary);
            font-size: 1.5rem;
        }

        /* Resource Styles */
        .resource {
            margin-bottom: 15px;
        }

        .resource-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .progress-bar {
            height: 8px;
            background: var(--secondary-light);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            border-radius: 4px;
        }

        .progress-ram {
            background: var(--primary);
        }

        .progress-cpu {
            background: var(--warning);
        }

        .progress-disk {
            background: var(--accent);
        }

        .progress-slots {
            background: var(--danger);
        }

        /* Server List Styles */
        .server-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .server-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .server-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .server-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .server-name {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .server-id {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .server-status {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-online {
            background: rgba(67, 181, 129, 0.2);
            color: var(--accent);
        }

        .status-offline {
            background: rgba(237, 66, 69, 0.2);
            color: var(--danger);
        }

        .status-starting {
            background: rgba(250, 168, 26, 0.2);
            color: var(--warning);
        }

        .server-resources {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .resource-item {
            background: var(--secondary-light);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }

        .resource-label {
            font-size: 0.8rem;
            color: var(--text-muted);
            margin-bottom: 5px;
        }

        .resource-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .server-actions {
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }

        .server-btn {
            flex: 1;
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            transition: all 0.3s ease;
        }

        .btn-start {
            background: var(--accent);
            color: white;
        }

        .btn-restart {
            background: var(--warning);
            color: white;
        }

        .btn-stop {
            background: var(--danger);
            color: white;
        }

        .btn-settings {
            background: var(--primary);
            color: white;
        }

        .server-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            grid-column: 1 / -1;
        }

        .empty-icon {
            font-size: 3rem;
            color: var(--text-muted);
            margin-bottom: 15px;
        }

        .create-server-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .create-server-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        /* Responsive adjustments */
        @media (max-width: 1024px) {
            .server-list {
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
                overflow: visible;
            }

            .sidebar-header h2, .nav-item span {
                display: none;
            }

            .nav-item {
                justify-content: center;
                padding: 15px;
            }

            .nav-item i {
                margin-right: 0;
            }

            .main-content {
                margin-left: 70px;
            }

            .server-resources {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><%= typeof settings !== 'undefined' && settings.name ? settings.name : 'Dashboard' %></h2>
        </div>

        <a href="/dashboard" class="nav-item">
            <i class="fas fa-home"></i>
            <span>Dashboard</span>
        </a>

        <a href="/servers" class="nav-item active">
            <i class="fas fa-server"></i>
            <span>My Servers</span>
        </a>

        <a href="/servers/new" class="nav-item">
            <i class="fas fa-plus"></i>
            <span>Create Server</span>
        </a>

        <a href="/afk" class="nav-item">
            <i class="fas fa-coins"></i>
            <span>AFK Earnings</span>
        </a>

        <a href="/profile" class="nav-item">
            <i class="fa-solid fa-id-card"></i>
            <span>My Profile</span>
        </a>

        <a href="/earn" class="nav-item">
            <i class="fas fa-money-bill-wave"></i>
            <span>Earn Coins</span>
        </a>

        <a href="/promotion" class="nav-item">
            <i class="fas fa-bullhorn"></i>
            <span>Promotion</span>
        </a>

        <a href="/stock" class="nav-item">
            <i class="fas fa-chart-line"></i>
            <span>Stock Market</span>
        </a>

        <a href="/store" class="nav-item">
            <i class="fas fa-microchip"></i>
            <span>Resources</span>
        </a>

        <a href="/security" class="nav-item">
            <i class="fas fa-cog"></i>
            <span>Settings</span>
        </a>

        <a href="/transfer" class="nav-item">
            <i class="fa-solid fa-money-bill-transfer"></i>
            <span>Transfer Coin</span>
        </a>

        <% if (typeof user !== 'undefined' && user.role === 'admin') { %>
            <a href="/admin" class="nav-item">
                <i class="fas fa-shield-alt"></i>
                <span>Admin Panel</span>
            </a>
        <% } %>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="user-info">
                <% if (typeof user !== 'undefined' && user.avatar) { %>
                    <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar">
                <% } else { %>
                    <div class="user-avatar" style="background: var(--primary); display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user"></i>
                    </div>
                <% } %>
                <div class="user-details">
                    <h3><%= typeof user !== 'undefined' ? user.username : 'Guest' %></h3>
                    <p>Balance: <span id="user-balance"><%= typeof coins !== 'undefined' ? coins.toFixed(2) : '0.00' %></span> coins</p>
                </div>
            </div>

            <button class="logout-btn" onclick="location.href='/logout'">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </button>
        </div>

        <!-- Resources Overview -->
        <div class="dashboard-grid">
            <!-- Resources Card -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Resources Overview</h3>
                    <div class="card-icon">
                        <i class="fas fa-microchip"></i>
                    </div>
                </div>

                <div class="resource">
                    <div class="resource-header">
                        <span class="resource-name">RAM</span>
                        <span class="resource-value" id="ram-value">
                            <% 
                                let ramUsed = 0;
                                let ramTotal = 0;
                                if (typeof packages !== 'undefined' && typeof extraresources !== 'undefined' && typeof pterodactyl !== 'undefined') {
                                    ramTotal = packages.ram + extraresources.ram;
                                    if (pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
                                        for (let i = 0; i < pterodactyl.relationships.servers.data.length; i++) {
                                            ramUsed += pterodactyl.relationships.servers.data[i].attributes.limits.memory || 0;
                                        }
                                    }
                                }
                            %>
                            <%= (ramUsed / 1024).toFixed(1) %> GiB / <%= (ramTotal / 1024).toFixed(1) %> GiB
                        </span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress progress-ram" id="ram-progress" style="width: <%= ramTotal > 0 ? (ramUsed / ramTotal * 100).toFixed(1) : 0 %>%;"></div>
                    </div>
                </div>

                <div class="resource">
                    <div class="resource-header">
                        <span class="resource-name">CPU</span>
                        <span class="resource-value" id="cpu-value">
                            <%
                                let cpuUsed = 0;
                                let cpuTotal = 0;
                                if (typeof packages !== 'undefined' && typeof extraresources !== 'undefined' && typeof pterodactyl !== 'undefined') {
                                    cpuTotal = packages.cpu + extraresources.cpu;
                                    if (pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
                                        for (let i = 0; i < pterodactyl.relationships.servers.data.length; i++) {
                                            cpuUsed += pterodactyl.relationships.servers.data[i].attributes.limits.cpu || 0;
                                        }
                                    }
                                }
                            %>
                            <%= (cpuUsed / 100).toFixed(1) %> / <%= (cpuTotal / 100).toFixed(1) %> Cores
                        </span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress progress-cpu" id="cpu-progress" style="width: <%= cpuTotal > 0 ? (cpuUsed / cpuTotal * 100).toFixed(1) : 0 %>%;"></div>
                    </div>
                </div>

                <div class="resource">
                    <div class="resource-header">
                        <span class="resource-name">Disk</span>
                        <span class="resource-value" id="disk-value">
                            <%
                                let diskUsed = 0;
                                let diskTotal = 0;
                                if (typeof packages !== 'undefined' && typeof extraresources !== 'undefined' && typeof pterodactyl !== 'undefined') {
                                    diskTotal = packages.disk + extraresources.disk;
                                    if (pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
                                        for (let i = 0; i < pterodactyl.relationships.servers.data.length; i++) {
                                            diskUsed += pterodactyl.relationships.servers.data[i].attributes.limits.disk || 0;
                                        }
                                    }
                                }
                            %>
                            <%= (diskUsed / 1024).toFixed(1) %> GiB / <%= (diskTotal / 1024).toFixed(1) %> GiB
                        </span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress progress-disk" id="disk-progress" style="width: <%= diskTotal > 0 ? (diskUsed / diskTotal * 100).toFixed(1) : 0 %>%;"></div>
                    </div>
                </div>

                <div class="resource">
                    <div class="resource-header">
                        <span class="resource-name">Server Slots</span>
                        <span class="resource-value" id="slots-value">
                            <%
                                let slotsUsed = 0;
                                let slotsTotal = 0;
                                if (typeof packages !== 'undefined' && typeof extraresources !== 'undefined' && typeof pterodactyl !== 'undefined') {
                                    slotsTotal = packages.servers + extraresources.servers;
                                    if (pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
                                        slotsUsed = pterodactyl.relationships.servers.data.length;
                                    }
                                }
                            %>
                            <%= slotsUsed %> / <%= slotsTotal %>
                        </span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress progress-slots" id="slots-progress" style="width: <%= slotsTotal > 0 ? (slotsUsed / slotsTotal * 100).toFixed(1) : 0 %>%;"></div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions Card -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Quick Actions</h3>
                    <div class="card-icon">
                        <i class="fas fa-bolt"></i>
                    </div>
                </div>

                <div style="display: grid; gap: 15px;">
                    <button class="create-server-btn" onclick="location.href='/servers/new'" style="justify-content: center;">
                        <i class="fas fa-plus"></i>
                        Create New Server
                    </button>

                    <button class="server-btn btn-settings" style="width: 100%;" onclick="location.href='/store'">
                        <i class="fas fa-shopping-cart"></i>
                        Buy More Resources
                    </button>
                </div>
            </div>
        </div>

        <!-- Server List -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">My Servers</h3>
                <div class="card-icon">
                    <i class="fas fa-server"></i>
                </div>
            </div>

            <div class="server-list">
                <% if (typeof pterodactyl !== 'undefined' && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data && pterodactyl.relationships.servers.data.length > 0) { %>
                    <% pterodactyl.relationships.servers.data.forEach(server => { 
                        // Simulate server status (in a real app, this would come from the API)
                        const statuses = ['online', 'offline', 'starting'];
                        const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
                    %>
                        <div class="server-card">
                            <div class="server-header">
                                <div>
                                    <h3 class="server-name"><%= server.attributes.name %></h3>
                                    <p class="server-id"><%= server.attributes.identifier %></p>
                                </div>
                                <div class="server-status <%= 'status-' + randomStatus %>">
                                    <i class="fas fa-circle" style="font-size: 8px; margin-right: 5px;"></i>
                                    <%= randomStatus.charAt(0).toUpperCase() + randomStatus.slice(1) %>
                                </div>
                            </div>

                            <div class="server-resources">
                                <div class="resource-item">
                                    <div class="resource-label">CPU</div>
                                    <div class="resource-value"><%= server.attributes.limits.cpu/100 %> Cores</div>
                                </div>
                                <div class="resource-item">
                                    <div class="resource-label">RAM</div>
                                    <div class="resource-value"><%= server.attributes.limits.memory/1024 %> GiB</div>
                                </div>
                                <div class="resource-item">
                                    <div class="resource-label">Storage</div>
                                    <div class="resource-value"><%= server.attributes.limits.disk/1024 %> GiB</div>
                                </div>
                            </div>

                                </button>
                                <button class="server-btn btn-settings" onclick="location.href='/edit?id=<%= server.attributes.id %>'">
                                    <i class="fas fa-cog"></i>
                                    Settings
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-server"></i>
                        </div>
                        <h3>No servers found</h3>
                        <p>You don't have any servers deployed yet</p>
                        <button class="create-server-btn" onclick="location.href='/servers/new'">
                            <i class="fas fa-plus"></i>
                            Create Your First Server
                        </button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        // Highlight active page in navigation
        document.addEventListener('DOMContentLoaded', function() {
            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('.nav-item');

            navLinks.forEach(link => {
                if (link.getAttribute('href') === currentPath) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });

            // Add click handlers for server buttons
            document.querySelectorAll('.server-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const serverCard = this.closest('.server-card');
                    const serverName = serverCard.querySelector('.server-name').textContent;
                    const action = this.textContent.trim();

                    // Show a notification
                    showNotification(`${action} action initiated for ${serverName}`);
                });
            });
        });

        function restartAllServers() {
            showNotification('Restarting all servers...');
        }

        function showNotification(message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.textContent = message;
            notification.style.position = 'fixed';
            notification.style.bottom = '20px';
            notification.style.right = '20px';
            notification.style.backgroundColor = 'var(--secondary-light)';
            notification.style.color = 'var(--text)';
            notification.style.padding = '12px 20px';
            notification.style.borderRadius = '6px';
            notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.2)';
            notification.style.zIndex = '1000';
            notification.style.opacity = '0';
            notification.style.transition = 'opacity 0.3s ease';

            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.style.opacity = '1';
            }, 10);

            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }
    </script>
</body>
</html>